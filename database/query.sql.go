// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createList = `-- name: CreateList :one
INSERT INTO list (name, description)
VALUES (?, ?)
RETURNING id, name, description
`

type CreateListParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createList, arg.Name, arg.Description)
	var i List
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM list
WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const getList = `-- name: GetList :one
SELECT id, name, description
FROM list
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetList(ctx context.Context, id interface{}) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, id)
	var i List
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const showList = `-- name: ShowList :many
SELECT id, name, description
FROM list
ORDER BY name
`

func (q *Queries) ShowList(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, showList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one
UPDATE list
set name = ?,
    description = ?
WHERE id = ?
RETURNING id, name, description
`

type UpdateListParams struct {
	Name        string
	Description sql.NullString
	ID          interface{}
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateList, arg.Name, arg.Description, arg.ID)
	var i List
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
